

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgaudit" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."continents" AS ENUM (
    'Africa',
    'Antarctica',
    'Asia',
    'Europe',
    'Oceania',
    'North America',
    'South America'
);


ALTER TYPE "public"."continents" OWNER TO "postgres";


CREATE TYPE "public"."member_types" AS ENUM (
    'owner',
    'editor',
    'viewer'
);


ALTER TYPE "public"."member_types" OWNER TO "postgres";


CREATE TYPE "public"."profile_types" AS ENUM (
    'editor',
    'contributorviewer'
);


ALTER TYPE "public"."profile_types" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."log_user_id"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
begin
  raise notice 'User ID: %', auth.uid();
  return new;
end;
$$;


ALTER FUNCTION "public"."log_user_id"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."set_added_by_to_auth_user_id"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$BEGIN
    NEW.added_by := auth.uid();
    RETURN NEW;
END;$$;


ALTER FUNCTION "public"."set_added_by_to_auth_user_id"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_user_metadata_by_email"("p_email" character varying, "p_display_name" character varying) RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
    v_user_id UUID;
BEGIN
    -- Find the user ID by email
    SELECT id INTO v_user_id
    FROM auth.users
    WHERE email = p_email
    LIMIT 1;

    -- If the user exists, update the raw_user_meta_data
    IF v_user_id IS NOT NULL THEN
        UPDATE auth.users
        SET raw_user_meta_data = jsonb_build_object(
            'sub', v_user_id,
            'email', p_email,
            'display_name', p_display_name,
            'email_verified', false,
            'phone_verified', false
        )
        WHERE id = v_user_id;
    ELSE
        RAISE NOTICE 'User with email % not found.', p_email;
    END IF;
END;
$$;


ALTER FUNCTION "public"."update_user_metadata_by_email"("p_email" character varying, "p_display_name" character varying) OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."families" (
    "id" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "added_by" "uuid",
    "name" character varying
);


ALTER TABLE "public"."families" OWNER TO "postgres";


ALTER TABLE "public"."families" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."families_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."family_locations" (
    "family_id" integer,
    "location_id" integer
);


ALTER TABLE "public"."family_locations" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."family_pets" (
    "family_id" integer,
    "pet_id" integer
);


ALTER TABLE "public"."family_pets" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."family_users" (
    "family_id" integer NOT NULL,
    "user_id" "uuid",
    "member_type" "public"."member_types" NOT NULL
);


ALTER TABLE "public"."family_users" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."locations" (
    "id" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "added_by" "uuid",
    "map_reference" character varying,
    "start_date" "date" NOT NULL,
    "end_date" "date"
);


ALTER TABLE "public"."locations" OWNER TO "postgres";


ALTER TABLE "public"."locations" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."locations_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."moments" (
    "id" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "added_by" "uuid",
    "pet_id" integer,
    "start_date" "date",
    "end_date" "date",
    "title" character varying,
    "body" character varying
);


ALTER TABLE "public"."moments" OWNER TO "postgres";


ALTER TABLE "public"."moments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."moments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."pets" (
    "id" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "added_by" "uuid",
    "name" character varying,
    "start_date" "date" NOT NULL,
    "end_date" "date"
);


ALTER TABLE "public"."pets" OWNER TO "postgres";


ALTER TABLE "public"."pets" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."pets_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."photos" (
    "id" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "added_by" "uuid",
    "moment_id" integer,
    "path" character varying
);


ALTER TABLE "public"."photos" OWNER TO "postgres";


ALTER TABLE "public"."photos" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."photos_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."families"
    ADD CONSTRAINT "families_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."family_users"
    ADD CONSTRAINT "family_users_pkey" PRIMARY KEY ("family_id");



ALTER TABLE ONLY "public"."locations"
    ADD CONSTRAINT "locations_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."moments"
    ADD CONSTRAINT "moments_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."pets"
    ADD CONSTRAINT "pets_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."photos"
    ADD CONSTRAINT "photos_pkey" PRIMARY KEY ("id");



CREATE OR REPLACE TRIGGER "set_added_by_before_insert" BEFORE INSERT ON "public"."families" FOR EACH STATEMENT EXECUTE FUNCTION "public"."set_added_by_to_auth_user_id"();



CREATE OR REPLACE TRIGGER "set_added_by_before_insert" BEFORE INSERT ON "public"."locations" FOR EACH STATEMENT EXECUTE FUNCTION "public"."set_added_by_to_auth_user_id"();



CREATE OR REPLACE TRIGGER "set_added_by_before_insert" BEFORE INSERT ON "public"."moments" FOR EACH STATEMENT EXECUTE FUNCTION "public"."set_added_by_to_auth_user_id"();



CREATE OR REPLACE TRIGGER "set_added_by_before_insert" BEFORE INSERT ON "public"."pets" FOR EACH STATEMENT EXECUTE FUNCTION "public"."set_added_by_to_auth_user_id"();



CREATE OR REPLACE TRIGGER "set_added_by_before_insert" BEFORE INSERT ON "public"."photos" FOR EACH STATEMENT EXECUTE FUNCTION "public"."set_added_by_to_auth_user_id"();



ALTER TABLE ONLY "public"."families"
    ADD CONSTRAINT "families_added_by_fkey" FOREIGN KEY ("added_by") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."family_locations"
    ADD CONSTRAINT "family_locations_family_id_fkey" FOREIGN KEY ("family_id") REFERENCES "public"."families"("id");



ALTER TABLE ONLY "public"."family_locations"
    ADD CONSTRAINT "family_locations_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("id");



ALTER TABLE ONLY "public"."family_pets"
    ADD CONSTRAINT "family_pets_family_id_fkey" FOREIGN KEY ("family_id") REFERENCES "public"."families"("id");



ALTER TABLE ONLY "public"."family_pets"
    ADD CONSTRAINT "family_pets_pet_id_fkey" FOREIGN KEY ("pet_id") REFERENCES "public"."pets"("id");



ALTER TABLE ONLY "public"."family_users"
    ADD CONSTRAINT "family_users_family_id_fkey" FOREIGN KEY ("family_id") REFERENCES "public"."families"("id");



ALTER TABLE ONLY "public"."family_users"
    ADD CONSTRAINT "family_users_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."locations"
    ADD CONSTRAINT "locations_added_by_fkey" FOREIGN KEY ("added_by") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."moments"
    ADD CONSTRAINT "moments_added_by_fkey" FOREIGN KEY ("added_by") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."moments"
    ADD CONSTRAINT "moments_pet_id_fkey" FOREIGN KEY ("pet_id") REFERENCES "public"."pets"("id");



ALTER TABLE ONLY "public"."pets"
    ADD CONSTRAINT "pets_added_by_fkey" FOREIGN KEY ("added_by") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."photos"
    ADD CONSTRAINT "photos_added_by_fkey" FOREIGN KEY ("added_by") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."photos"
    ADD CONSTRAINT "photos_moment_id_fkey" FOREIGN KEY ("moment_id") REFERENCES "public"."moments"("id");





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";


























































































































































































GRANT ALL ON FUNCTION "public"."log_user_id"() TO "anon";
GRANT ALL ON FUNCTION "public"."log_user_id"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."log_user_id"() TO "service_role";



GRANT ALL ON FUNCTION "public"."set_added_by_to_auth_user_id"() TO "anon";
GRANT ALL ON FUNCTION "public"."set_added_by_to_auth_user_id"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."set_added_by_to_auth_user_id"() TO "service_role";



GRANT ALL ON FUNCTION "public"."update_user_metadata_by_email"("p_email" character varying, "p_display_name" character varying) TO "anon";
GRANT ALL ON FUNCTION "public"."update_user_metadata_by_email"("p_email" character varying, "p_display_name" character varying) TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_user_metadata_by_email"("p_email" character varying, "p_display_name" character varying) TO "service_role";


















GRANT ALL ON TABLE "public"."families" TO "anon";
GRANT ALL ON TABLE "public"."families" TO "authenticated";
GRANT ALL ON TABLE "public"."families" TO "service_role";



GRANT ALL ON SEQUENCE "public"."families_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."families_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."families_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."family_locations" TO "anon";
GRANT ALL ON TABLE "public"."family_locations" TO "authenticated";
GRANT ALL ON TABLE "public"."family_locations" TO "service_role";



GRANT ALL ON TABLE "public"."family_pets" TO "anon";
GRANT ALL ON TABLE "public"."family_pets" TO "authenticated";
GRANT ALL ON TABLE "public"."family_pets" TO "service_role";



GRANT ALL ON TABLE "public"."family_users" TO "anon";
GRANT ALL ON TABLE "public"."family_users" TO "authenticated";
GRANT ALL ON TABLE "public"."family_users" TO "service_role";



GRANT ALL ON TABLE "public"."locations" TO "anon";
GRANT ALL ON TABLE "public"."locations" TO "authenticated";
GRANT ALL ON TABLE "public"."locations" TO "service_role";



GRANT ALL ON SEQUENCE "public"."locations_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."locations_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."locations_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."moments" TO "anon";
GRANT ALL ON TABLE "public"."moments" TO "authenticated";
GRANT ALL ON TABLE "public"."moments" TO "service_role";



GRANT ALL ON SEQUENCE "public"."moments_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."moments_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."moments_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."pets" TO "anon";
GRANT ALL ON TABLE "public"."pets" TO "authenticated";
GRANT ALL ON TABLE "public"."pets" TO "service_role";



GRANT ALL ON SEQUENCE "public"."pets_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."pets_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."pets_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."photos" TO "anon";
GRANT ALL ON TABLE "public"."photos" TO "authenticated";
GRANT ALL ON TABLE "public"."photos" TO "service_role";



GRANT ALL ON SEQUENCE "public"."photos_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."photos_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."photos_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
